import telebot
from telebot import types
from for_db import BotDB
import requests
from additions import add_sticker, add_music
from api.weather import get_weather
import time
from api.for_affirmation import random_aff

BOT_TOKEN = ' '
bot = telebot.TeleBot(BOT_TOKEN)


def unclear(mes):
    bot.send_message(mes.from_user.id, 'idk')


# –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.from_user.id, "<b>‚ú®–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Ö—Ä–∞–Ω–∏—Ç —Ç–≤–æ—ë –º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ! ‚ú®</b>\n"
                                           "\n"
                                           "–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥—ë—à—å: –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏–∏, –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—É—é –≥–∏–º–Ω–∞—Å—Ç–∏–∫—É,"
                                           "–∑–≤—É–∫–∏ –ø—Ä–∏—Ä–æ–¥—ã –∏ –º—É–∑—ã–∫—É –¥–ª—è –º–µ–¥–∏—Ç–∞—Ü–∏–∏.\n"
                                           "\n"
                                           "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ –±–æ—Ç —É–º–µ–µ—Ç –Ω–∞–ø–∏—à–∏ —Å–ª–µ—à /\n"
                                           "–ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º –±–æ—Ç–∞ \n"
                                           "/commands\n"
                                           "–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–∏—à–∏ /help", parse_mode='html')
    bot.send_sticker(message.from_user.id, add_sticker())
    db_cr = BotDB()
    user_id = message.from_user.id
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not db_cr.check(user_id):
        db_cr.add_us(user_id)
        bot.send_message(message.from_user.id, "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
    else:
        bot.send_message(message.from_user.id, "–≤—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω")
    msg = bot.send_message(message.from_user.id, "–Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞–∫–æ–º –≤—ã –≥–æ—Ä–æ–¥–µ")
    bot.register_next_step_handler(msg, city)


# –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–≥–æ–¥—É
def city(message):
    city_w = get_weather(message.text)
    bot.send_message(message.from_user.id, city_w)


# –∫–æ–º–∞–Ω–¥–∞ —Å —Ç–µ—Ä–º–∏–Ω–∞–º–∏
@bot.message_handler(commands=['what_is'])
def what(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    btn1 = types.InlineKeyboardButton('–ß—Ç–æ —Ç–∞–∫–æ–µ –º–µ–¥–∏—Ç–∞—Ü–∏—è?', url="https://clck.ru/bArjy")
    btn2 = types.InlineKeyboardButton('–ß—Ç–æ —Ç–∞–∫–æ–µ –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—è?', url="https://clck.ru/L6Jsc")
    markup.add(btn1, btn2)
    bot.send_message(message.from_user.id, '–ó–¥–µ—Å—å –≤—ã —É–∑–Ω–∞–µ—Ç–µ üëá', reply_markup=markup)


# –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å
@bot.message_handler(commands=['help'])
def help(message):
    bot.send_sticker(message.from_user.id, add_sticker())
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–í–ö–æ–Ω—Ç–∞–∫—Ç–µ ‚ö°Ô∏è', url='vk.com/dmashinova'))
    bot.send_message(message.from_user.id, '1) –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –∏ —É–∑–Ω–∞—Ç—å, —á—Ç–æ –æ–Ω–∏ –¥–µ–ª–∞—é—Ç –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª—ç—à /'
                                           '\n'
                                           '2) –ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º –±–æ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /commands'
                                           '\n'
                                           '3) –ü–∏—à–∏—Ç–µ —Å—é–¥–∞, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Çüëá', reply_markup=markup)


# –º–µ–Ω—é —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –±–æ—Ç–∞
@bot.message_handler(commands=['commands'])
def commands(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1, one_time_keyboard=True)
    btn_med = types.KeyboardButton('‚òÄÔ∏è–í—ã–±—Ä–∞—Ç—å —á–∞—Å—Ç—å —Å—É—Ç–æ–∫')
    btn_mus = types.KeyboardButton('üéß–ú—É–∑—ã–∫–∞')
    markup.add(btn_med, btn_mus)
    msg = bot.send_message(message.from_user.id, '–í—ã–±–∏—Ä–∞–π—Ç–µ', reply_markup=markup)
    bot.register_next_step_handler(msg, selection)


def selection(message):
    if message.text == '‚òÄÔ∏è–í—ã–±—Ä–∞—Ç—å —á–∞—Å—Ç—å —Å—É—Ç–æ–∫':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        btn1 = types.KeyboardButton('üåá—É—Ç—Ä–æ/–¥–µ–Ω—å')
        btn2 = types.KeyboardButton('üåÉ–≤–µ—á–µ—Ä/–Ω–æ—á—å')
        markup.add(btn1, btn2)
        bot.send_message(message.from_user.id, '–≤—ã–±–∏—Ä–∞–π—Ç–µ', reply_markup=markup)
    elif message.text == 'üéß–ú—É–∑—ã–∫–∞':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=1)
        btn1 = types.KeyboardButton('–∑–≤—É–∫–∏ –ø—Ä–∏—Ä–æ–¥—ã')
        btn2 = types.KeyboardButton('–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ—é –º—É–∑—ã–∫—É')
        markup.add(btn1, btn2)
        msg = bot.send_message(message.from_user.id, '–õ—é–±–∞—è –º—É–∑—ã–∫–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ –¥—ã—Ö–∞–Ω–∏–µ, –ø—É–ª—å—Å, '
                                               '–∫—Ä–æ–≤—è–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –∏ —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫—É. –ú—É–∑—ã–∫–∞ –º–æ–∂–µ—Ç '
                                               '—Å–Ω–∏–º–∞—Ç—å —Å—Ç—Ä–µ—Å—Å –∏ –ø–æ–≤—ã—à–∞—Ç—å –∏–º–º—É–Ω–∏—Ç–µ—Ç, –ø–æ–¥–Ω–∏–º–∞—Ç—å '
                                               '—Å–∏–ª—É –¥—É—Ö–∞, –≤–¥–æ—Ö–Ω–æ–≤–∏—Ç—å –Ω–∞ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ.', reply_markup=markup)
        bot.register_next_step_handler(msg, music)
    else:
        unclear(message)


# —Ñ—É–Ω–∫—Ü–∏–∏ –∫ –∫–Ω–æ–ø–∫–µ '–ú—É–∑—ã–∫–∞'
def music(message):
    if message.text == '–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ—é –º—É–∑—ã–∫—É':
        bot.send_message(message.from_user.id, '–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ mp3')
    elif message.text == '–∑–≤—É–∫–∏ –ø—Ä–∏—Ä–æ–¥—ã':
        audio = open(f'music_of_nature/{add_music()}', 'rb')
        bot.send_audio(message.from_user.id, audio)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
@bot.message_handler(func=lambda m: True)
def all_mes(message):
    if message.text == 'üåá—É—Ç—Ä–æ/–¥–µ–Ω—å':
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        key_af = types.InlineKeyboardButton(text='–∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—è –Ω–∞ –¥–µ–Ω—å', callback_data='affirmation')
        key_pr = types.InlineKeyboardButton(text='–¥—ã—Ö–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞', callback_data='practica')
        keyboard.add(key_af, key_pr)
        bot.send_message(message.from_user.id, '–ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º –≤–∑–±–æ–¥—Ä–∏—Ç—Å—è', reply_markup=keyboard)
    elif message.text == 'üåÉ–≤–µ—á–µ—Ä/–Ω–æ—á—å':
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        key_af = types.InlineKeyboardButton(text='–º–µ–¥–∏—Ç–∞—Ü–∏—è', callback_data='meditation')
        key_pr = types.InlineKeyboardButton(text='–¥—ã—Ö–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞', callback_data='practica')
        keyboard.add(key_af, key_pr)
        bot.send_message(message.from_user.id, '–ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è', reply_markup=keyboard)
    else:
        unclear(message)


@bot.callback_query_handler(func=lambda call: True)
def callback_work(call):
    if call.data == 'affirmation':
        bot.send_message(call.message.chat.id, f'ü™¥–ê—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—è'
                                               '\n'
                                               '\n'
                                               '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—é –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑. –ß—Ç–æ–±—ã –æ—â—É—Ç–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –æ—Ç –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏–π,'
                                               ' –ø—Ä–æ–≥–æ–≤–∞—Ä–∏–≤–∞–π—Ç–µ –∏—Ö –≤—Å–ª—É—Ö –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ. üëá')
        bot.send_message(call.message.chat.id, random_aff())
    elif call.data == 'meditation':
        bot.send_message(call.message.chat.id, '–≤–æ—Ç medita')
    elif call.data == 'practica':
        bot.send_message(call.message.chat.id, '–î—ã—Ö–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞: –°—è–¥—å—Ç–µ –∏–ª–∏ –ª—è–≥—Ç–µ, —Ä–∞—Å—Å–ª–∞–±—å—Ç–µ –º—ã—à—Ü—ã —Ä—É–∫, –Ω–æ–≥, '
                                               '–ª–∏—Ü–∞ –∏ –≤–µ—Ä—Ö–Ω–∏–µ –º—ã—à—Ü—ã –≥—Ä—É–¥–∏. '
                                               '\n'
                                               '\n'
                                               '–Ø –ø–∏—à—É –≤—ã –¥–µ–ª–∞–µ—Ç–µ')
        for i in range(4):
            bot.send_message(call.message.chat.id, '–í–¥—ã—Ö–∞–π—Ç–µ')
            time.sleep(4)
            bot.send_message(call.message.chat.id, '–í—ã–¥—ã—Ö–∞–π—Ç–µ')
            time.sleep(4)
        bot.send_message(call.message.chat.id, '–ó–∞–∫–æ–Ω—á–∏–ª–∏')
    else:
        bot.send_message(call.message.chat.id, 'idk')


def breathing(message):
    bot.send_message(message.from_user.id, 'gdgfhhjhtrgerwer')


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(content_types='audio')
def handle_docs_photo(message):
    file_info = bot.get_file(message.audio.file_id)
    file = requests.get('https://api.telegram.org/file/bot{0}/{1}'.format(BOT_TOKEN, file_info.file_path))

    msg = bot.send_message(message.from_user.id, '–Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞')
    bot.register_next_step_handler(msg, take_name, file)


def take_name(message, fi):
    music = message.text
    with open(f'user_files/{music}.mp3', 'wb') as f:
        f.write(fi.content)
    bot.send_message(message.from_user.id, '–≤–∞—à–∞ –º—É–∑—ã–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞')


if __name__ == '__main__':  # —á—Ç–æ–±—ã –∫–æ–¥ –≤—ã–ø–æ–ª–Ω—è–ª—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤ –≤–∏–¥–µ —Å—Ü–µ–Ω–∞—Ä–∏—è, –∞ –Ω–µ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
    try:
        bot.polling(none_stop=True)  # –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    except Exception as e:
        print(e)
        time.sleep(15)